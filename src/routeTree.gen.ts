/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as DashboardRouteRouteImport } from './routes/dashboard/route'
import { Route as landingRouteRouteImport } from './routes/(landing)/route'
import { Route as authRouteRouteImport } from './routes/(auth)/route'
import { Route as DashboardIndexRouteImport } from './routes/dashboard/index'
import { Route as landingIndexRouteImport } from './routes/(landing)/index'
import { Route as authTermsRouteImport } from './routes/(auth)/terms'
import { Route as authRegisterRouteImport } from './routes/(auth)/register'
import { Route as authPrivacyRouteImport } from './routes/(auth)/privacy'
import { Route as authLoginRouteImport } from './routes/(auth)/login'
import { Route as authForgotPasswordRouteImport } from './routes/(auth)/forgot-password'
import { Route as DashboardProjectsIndexRouteImport } from './routes/dashboard/projects/index'
import { Route as DashboardProjectIndexRouteImport } from './routes/dashboard/project/index'
import { Route as DashboardProjectProjectIdIndexRouteImport } from './routes/dashboard/project/$projectId/index'
import { ServerRoute as ApiAuthSplatServerRouteImport } from './routes/api/auth/$'

const rootServerRouteImport = createServerRootRoute()

const DashboardRouteRoute = DashboardRouteRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const landingRouteRoute = landingRouteRouteImport.update({
  id: '/(landing)',
  getParentRoute: () => rootRouteImport,
} as any)
const authRouteRoute = authRouteRouteImport.update({
  id: '/(auth)',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardIndexRoute = DashboardIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const landingIndexRoute = landingIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => landingRouteRoute,
} as any)
const authTermsRoute = authTermsRouteImport.update({
  id: '/terms',
  path: '/terms',
  getParentRoute: () => authRouteRoute,
} as any)
const authRegisterRoute = authRegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => authRouteRoute,
} as any)
const authPrivacyRoute = authPrivacyRouteImport.update({
  id: '/privacy',
  path: '/privacy',
  getParentRoute: () => authRouteRoute,
} as any)
const authLoginRoute = authLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => authRouteRoute,
} as any)
const authForgotPasswordRoute = authForgotPasswordRouteImport.update({
  id: '/forgot-password',
  path: '/forgot-password',
  getParentRoute: () => authRouteRoute,
} as any)
const DashboardProjectsIndexRoute = DashboardProjectsIndexRouteImport.update({
  id: '/projects/',
  path: '/projects/',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const DashboardProjectIndexRoute = DashboardProjectIndexRouteImport.update({
  id: '/project/',
  path: '/project/',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const DashboardProjectProjectIdIndexRoute =
  DashboardProjectProjectIdIndexRouteImport.update({
    id: '/project/$projectId/',
    path: '/project/$projectId/',
    getParentRoute: () => DashboardRouteRoute,
  } as any)
const ApiAuthSplatServerRoute = ApiAuthSplatServerRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof landingIndexRoute
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/forgot-password': typeof authForgotPasswordRoute
  '/login': typeof authLoginRoute
  '/privacy': typeof authPrivacyRoute
  '/register': typeof authRegisterRoute
  '/terms': typeof authTermsRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/dashboard/project': typeof DashboardProjectIndexRoute
  '/dashboard/projects': typeof DashboardProjectsIndexRoute
  '/dashboard/project/$projectId': typeof DashboardProjectProjectIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof landingIndexRoute
  '/forgot-password': typeof authForgotPasswordRoute
  '/login': typeof authLoginRoute
  '/privacy': typeof authPrivacyRoute
  '/register': typeof authRegisterRoute
  '/terms': typeof authTermsRoute
  '/dashboard': typeof DashboardIndexRoute
  '/dashboard/project': typeof DashboardProjectIndexRoute
  '/dashboard/projects': typeof DashboardProjectsIndexRoute
  '/dashboard/project/$projectId': typeof DashboardProjectProjectIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/(auth)': typeof authRouteRouteWithChildren
  '/(landing)': typeof landingRouteRouteWithChildren
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/(auth)/forgot-password': typeof authForgotPasswordRoute
  '/(auth)/login': typeof authLoginRoute
  '/(auth)/privacy': typeof authPrivacyRoute
  '/(auth)/register': typeof authRegisterRoute
  '/(auth)/terms': typeof authTermsRoute
  '/(landing)/': typeof landingIndexRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/dashboard/project/': typeof DashboardProjectIndexRoute
  '/dashboard/projects/': typeof DashboardProjectsIndexRoute
  '/dashboard/project/$projectId/': typeof DashboardProjectProjectIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/forgot-password'
    | '/login'
    | '/privacy'
    | '/register'
    | '/terms'
    | '/dashboard/'
    | '/dashboard/project'
    | '/dashboard/projects'
    | '/dashboard/project/$projectId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/forgot-password'
    | '/login'
    | '/privacy'
    | '/register'
    | '/terms'
    | '/dashboard'
    | '/dashboard/project'
    | '/dashboard/projects'
    | '/dashboard/project/$projectId'
  id:
    | '__root__'
    | '/(auth)'
    | '/(landing)'
    | '/dashboard'
    | '/(auth)/forgot-password'
    | '/(auth)/login'
    | '/(auth)/privacy'
    | '/(auth)/register'
    | '/(auth)/terms'
    | '/(landing)/'
    | '/dashboard/'
    | '/dashboard/project/'
    | '/dashboard/projects/'
    | '/dashboard/project/$projectId/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  authRouteRoute: typeof authRouteRouteWithChildren
  landingRouteRoute: typeof landingRouteRouteWithChildren
  DashboardRouteRoute: typeof DashboardRouteRouteWithChildren
}
export interface FileServerRoutesByFullPath {
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRoutesByTo {
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/auth/$'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/auth/$'
  id: '__root__' | '/api/auth/$'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiAuthSplatServerRoute: typeof ApiAuthSplatServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(landing)': {
      id: '/(landing)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof landingRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)': {
      id: '/(auth)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof DashboardIndexRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/(landing)/': {
      id: '/(landing)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof landingIndexRouteImport
      parentRoute: typeof landingRouteRoute
    }
    '/(auth)/terms': {
      id: '/(auth)/terms'
      path: '/terms'
      fullPath: '/terms'
      preLoaderRoute: typeof authTermsRouteImport
      parentRoute: typeof authRouteRoute
    }
    '/(auth)/register': {
      id: '/(auth)/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof authRegisterRouteImport
      parentRoute: typeof authRouteRoute
    }
    '/(auth)/privacy': {
      id: '/(auth)/privacy'
      path: '/privacy'
      fullPath: '/privacy'
      preLoaderRoute: typeof authPrivacyRouteImport
      parentRoute: typeof authRouteRoute
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginRouteImport
      parentRoute: typeof authRouteRoute
    }
    '/(auth)/forgot-password': {
      id: '/(auth)/forgot-password'
      path: '/forgot-password'
      fullPath: '/forgot-password'
      preLoaderRoute: typeof authForgotPasswordRouteImport
      parentRoute: typeof authRouteRoute
    }
    '/dashboard/projects/': {
      id: '/dashboard/projects/'
      path: '/projects'
      fullPath: '/dashboard/projects'
      preLoaderRoute: typeof DashboardProjectsIndexRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/dashboard/project/': {
      id: '/dashboard/project/'
      path: '/project'
      fullPath: '/dashboard/project'
      preLoaderRoute: typeof DashboardProjectIndexRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/dashboard/project/$projectId/': {
      id: '/dashboard/project/$projectId/'
      path: '/project/$projectId'
      fullPath: '/dashboard/project/$projectId'
      preLoaderRoute: typeof DashboardProjectProjectIdIndexRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface authRouteRouteChildren {
  authForgotPasswordRoute: typeof authForgotPasswordRoute
  authLoginRoute: typeof authLoginRoute
  authPrivacyRoute: typeof authPrivacyRoute
  authRegisterRoute: typeof authRegisterRoute
  authTermsRoute: typeof authTermsRoute
}

const authRouteRouteChildren: authRouteRouteChildren = {
  authForgotPasswordRoute: authForgotPasswordRoute,
  authLoginRoute: authLoginRoute,
  authPrivacyRoute: authPrivacyRoute,
  authRegisterRoute: authRegisterRoute,
  authTermsRoute: authTermsRoute,
}

const authRouteRouteWithChildren = authRouteRoute._addFileChildren(
  authRouteRouteChildren,
)

interface landingRouteRouteChildren {
  landingIndexRoute: typeof landingIndexRoute
}

const landingRouteRouteChildren: landingRouteRouteChildren = {
  landingIndexRoute: landingIndexRoute,
}

const landingRouteRouteWithChildren = landingRouteRoute._addFileChildren(
  landingRouteRouteChildren,
)

interface DashboardRouteRouteChildren {
  DashboardIndexRoute: typeof DashboardIndexRoute
  DashboardProjectIndexRoute: typeof DashboardProjectIndexRoute
  DashboardProjectsIndexRoute: typeof DashboardProjectsIndexRoute
  DashboardProjectProjectIdIndexRoute: typeof DashboardProjectProjectIdIndexRoute
}

const DashboardRouteRouteChildren: DashboardRouteRouteChildren = {
  DashboardIndexRoute: DashboardIndexRoute,
  DashboardProjectIndexRoute: DashboardProjectIndexRoute,
  DashboardProjectsIndexRoute: DashboardProjectsIndexRoute,
  DashboardProjectProjectIdIndexRoute: DashboardProjectProjectIdIndexRoute,
}

const DashboardRouteRouteWithChildren = DashboardRouteRoute._addFileChildren(
  DashboardRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  authRouteRoute: authRouteRouteWithChildren,
  landingRouteRoute: landingRouteRouteWithChildren,
  DashboardRouteRoute: DashboardRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiAuthSplatServerRoute: ApiAuthSplatServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
